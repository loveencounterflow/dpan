{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\n{ Dba, }                  = require 'icql-dba'\ndef                       = Object.defineProperty\nglob                      = require 'glob'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nsemver_satisfies          = require 'semver/functions/satisfies'\nsemver_cmp                = require 'semver/functions/cmp'\nmisfit                    = Symbol 'misfit'\nE                         = require './errors'\n{ createRequire, }        = require 'module'\ndef                       = Object.defineProperty\n\n\n#===========================================================================================================\ntypes.declare 'dpan_constructor_cfg', tests:\n  '@isa.object x':        ( x ) -> @isa.object x\n  'x.prefix is a prefix': ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n  '@isa.boolean x.recreate': ( x ) -> @isa.boolean x.recreate\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dpan_fs_fetch_pkg_json_info_cfg', tests:\n  '@isa.object x':                    ( x ) -> @isa.object x\n  '@isa.nonempty_text x.pkg_fspath':  ( x ) -> @isa.nonempty_text x.pkg_fspath\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dpan_fs_resolve_dep_fspath_cfg', tests:\n  '@isa.object x':                    ( x ) -> @isa.object x\n  '@isa.nonempty_text x.pkg_fspath':  ( x ) -> @isa.nonempty_text x.pkg_fspath\n  '@isa.nonempty_text x.dep_name':    ( x ) -> @isa.nonempty_text x.dep_name\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dpan_fs_walk_dep_infos_cfg', tests:\n  '@isa.object x':                    ( x ) -> @isa.object x\n  '@isa.nonempty_text x.pkg_fspath':  ( x ) -> @isa.nonempty_text x.pkg_fspath\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dpan_constructor_cfg:\n    dba:          null\n    prefix:       'dpan_'\n    db_path:      PATH.resolve PATH.join __dirname, '../dpan.sqlite'\n    recreate:     false\n    registry_url: 'https://registry.npmjs.org/'\n  dpan_fs_fetch_pkg_json_info_cfg:\n    pkg_fspath:   null\n    fallback:     misfit\n  dpan_fs_resolve_dep_fspath_cfg:\n    pkg_fspath:   null\n    dep_name:     null\n  dpan_fs_walk_dep_infos_cfg:\n    pkg_fspath:   null\n    fallback:     misfit\n\n\n#===========================================================================================================\nclass @Dpan\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    validate.dpan_constructor_cfg @cfg = { types.defaults.dpan_constructor_cfg..., cfg..., }\n    #.......................................................................................................\n    dba  = if @cfg.dba? then @cfg.dba else new Dba()\n    def @, 'dba', { enumerable: false, value: dba, }\n    delete @cfg.dba\n    @cfg = freeze @cfg\n    #.......................................................................................................\n    if @cfg.db_path?\n      @dba.open { path: @cfg.db_path, }\n    #.......................................................................................................\n    ### NOTE avoid to make cache displayable as it contains huge objects that block the process for\n    minutes when printed to console ###\n    def @, '_cache', { enumerable: false, value: {}, }\n    @_cache.custom_requires = {}\n    #.......................................................................................................\n    @_clear_db() if @cfg.recreate\n    @_create_db_structure()\n    @_compile_sql()\n    @_create_sql_functions()\n    return undefined\n\n\n  #=========================================================================================================\n  # DDL\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    ### TAINT unify name / pkg_name, version / pkg_version ###\n    prefix = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      create table if not exists #{prefix}pkgs (\n          pkg_name          text    not null references #{prefix}pkg_names    ( pkg_name    ),\n          pkg_version       text    not null references #{prefix}pkg_versions ( pkg_version ),\n          pkg_vname         text    generated always as ( pkg_name || '@' || pkg_version ) virtual not null unique,\n          description       text,\n          url               text,\n          fspath            text,\n        primary key ( pkg_name, pkg_version ) );\n      create unique index if not exists #{prefix}pkgs_vname_idx on #{prefix}pkgs ( pkg_vname );\n      create table if not exists #{prefix}deps (\n          pkg_vname         text    not null references #{prefix}pkgs ( pkg_vname ),\n          dep_vname         text    not null references #{prefix}pkgs ( pkg_vname ),\n        primary key ( pkg_vname, dep_vname ) );\n      create table if not exists #{prefix}pkg_names (\n          pkg_name          text not null primary key );\n      create table if not exists #{prefix}pkg_versions (\n          pkg_version       text not null primary key );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _clear_db: ->\n    ### TAINT should be a method of ICQL/DB ###\n    prefix = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      drop index if exists #{prefix}pkgs_vname_idx;\n      drop table if exists #{prefix}deps;\n      drop table if exists #{prefix}pkgs;\n      drop table if exists #{prefix}pkg_names;\n      drop table if exists #{prefix}pkg_versions;\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    prefix = @cfg.prefix\n    @sql =\n      add_pkg_version: SQL\"\"\"\n        insert into #{prefix}pkg_versions ( pkg_version )\n          values ( $pkg_version )\n          on conflict do nothing;\"\"\"\n      add_pkg_name: SQL\"\"\"\n        insert into #{prefix}pkg_names ( pkg_name )\n          values ( $pkg_name )\n          on conflict do nothing;\"\"\"\n      add_pkg: SQL\"\"\"\n        insert into #{prefix}pkgs ( pkg_name, pkg_version, description, url, fspath )\n          values ( $pkg_name, $pkg_version, $description, $url, $fspath )\n          on conflict do nothing;\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    @dba.create_function name: 'semver_satisfies', call: ( version, pattern ) =>\n      return 1 if semver_satisfies version, pattern\n      return 0\n\n  #=========================================================================================================\n  # FS\n  #---------------------------------------------------------------------------------------------------------\n  fs_fetch_pkg_json_info: ( cfg ) ->\n    validate.dpan_fs_fetch_pkg_json_info_cfg cfg = { types.defaults.dpan_fs_fetch_pkg_json_info_cfg..., cfg..., }\n    RPKGUP            = await import( 'read-pkg-up' )\n    pkg_json_info     = await RPKGUP.readPackageUpAsync { cwd: cfg.pkg_fspath, normalize: true, }\n    unless pkg_json_info?\n      return cfg.fallback unless cfg.fallback is misfit\n      throw new E.Dba_fs_pkg_json_not_found '^fs_fetch_pkg_json_info@1^', cfg.pkg_fspath\n    pkg_json          = pkg_json_info.packageJson\n    pkg_name          = pkg_json.name\n    pkg_version       = pkg_json.version\n    pkg_description   = pkg_json.description\n    pkg_keywords      = pkg_json.keywords     ? []\n    pkg_deps          = pkg_json.dependencies ? {}\n    pkg_json_fspath   = pkg_json_info.path\n    return {\n      # pkg_json\n      pkg_name\n      pkg_version\n      pkg_description\n      pkg_keywords\n      pkg_deps\n      pkg_json_fspath }\n\n  #---------------------------------------------------------------------------------------------------------\n  fs_resolve_dep_fspath: ( cfg ) ->\n    validate.dpan_fs_resolve_dep_fspath_cfg cfg = { types.defaults.dpan_fs_resolve_dep_fspath_cfg..., cfg..., }\n    path  = PATH.join cfg.pkg_fspath, 'whatever' ### pkg_fspath points to pkg folder, must be one element deeper ###\n    rq    = ( @_cache.custom_requires[ path ] ?= createRequire path )\n    return rq.resolve cfg.dep_name\n\n  #---------------------------------------------------------------------------------------------------------\n  fs_walk_dep_infos: ( cfg ) ->\n    validate.dpan_fs_walk_dep_infos_cfg cfg = { types.defaults.dpan_fs_walk_dep_infos_cfg..., cfg..., }\n    { pkg_fspath\n      fallback    }             = cfg\n    pkg_info                    = await @fs_fetch_pkg_json_info { pkg_fspath, }\n    # { pkg_json    }             = await @fs_fetch_pkg_json_info { pkg_fspath, }\n    for dep_name, dep_svrange of pkg_info.pkg_deps ? {}\n      dep_fspath                = @fs_resolve_dep_fspath { pkg_fspath, dep_name, }\n      dep_json_info             = await @fs_fetch_pkg_json_info { pkg_fspath: dep_fspath, fallback, }\n      ### TAINT `dep_svrange` is a property of the depending package, not the dependency ###\n      dep_json_info.dep_svrange = dep_svrange\n      yield dep_json_info\n    return null\n\n"
  ]
}